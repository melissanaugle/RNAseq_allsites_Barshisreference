source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
#originally largest = 0.1
smallest=5,   # a GO category should contain at least this many genes to be considered,
#originally smallest = 5
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#originally clustercutheight = 0.25
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
#Only run the following to install BiocManager if not already installed
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install()
# Only run the following commands once to install WGCNA and flashClust on your computer
#BiocManager::install("WGCNA")
#BiocManager::install("edgeR")
#install.packages("flashClust")
# Load WGCNA and flashClust libraries every time you open R
library(WGCNA)
library(flashClust)
library(tidyverse)
library("edgeR")
library("statmod")
library("data.table")
#Set your current working directory (where all your files are)
setwd("/Users/Melissa/Desktop/GitHub/RNAseq_allsites_Barshisreference/WGCNA/")
# This creates an object called "datExpr" that contains the normalized counts file output from EdgeR
datExpr = read.csv("../GLM_edgeR_outputs/controls/glmQLF_normalizedCounts_controls.csv")
# "head" the file to preview it
head(datExpr) # You see that genes are listed in a column named "X" and samples are in columns
#row.names(datExpr) = datExpr$X
#datExpr$X = NULL
datExpr = as.data.frame(t(datExpr)) # now samples are rows and genes are columns
dim(datExpr) # 38 samples (or 19 for just heat/control) and 15109 genes (or fewer for heat/control)
head(datExpr)
row.names(datExpr)
gsg = goodSamplesGenes(datExpr, verbose = 3)
gsg$allOK
datTraits = read.csv("Controls_tommodelv3_06_29_2021_vatialow_manuscript/phenotypedata_controls_tommodels_06_29_21_manuscript.csv")
head(datTraits)
nrow(datTraits)
#Then form a data frame analogous to expression data that will hold the clinical traits.
rownames(datTraits) = datTraits[,1]
datTraits$Sample = NULL
table(rownames(datTraits)==rownames(datExpr)) #should return TRUE if datasets align correctly, otherwise your names are out of order
head(datTraits)
# Choose a soft threshold power ------------------------------------
powers = c(c(1:10), seq(from =10, to=30, by=1)) #choosing a set of soft-thresholding powers
sft = pickSoftThreshold(datExpr, powerVector=powers, verbose =5, networkType="signed") #call network topology analysis function
sizeGrWindow(9,5)
par(mfrow= c(1,2))
cex1=0.9
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], xlab= "Soft Threshold (power)", ylab="Scale Free Topology Model Fit, signed R^2", type= "n", main= paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], labels=powers, cex=cex1, col="red")
abline(h=0.9, col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5], xlab= "Soft Threshold (power)", ylab="Mean Connectivity", type="n", main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1, col="red")
#build a adjacency "correlation" matrix
enableWGCNAThreads()
softPower = 14
adjacency = adjacency(datExpr, power = softPower, type = "signed") #specify network type
head(adjacency)
#translate the adjacency into topological overlap matrix and calculate the corresponding dissimilarity:
TOM = TOMsimilarity(adjacency, TOMType="signed") # specify network type
dissTOM = 1-TOM
# Generate a clustered gene tree
geneTree = flashClust(as.dist(dissTOM), method="average")
plot(geneTree, xlab="", sub="", main= "Gene Clustering on TOM-based dissimilarity", labels= FALSE, hang=0.04)
#This sets the minimum number of genes to cluster into a module
minModuleSize = 30
dynamicMods = cutreeDynamic(dendro= geneTree, distM= dissTOM, deepSplit=2, pamRespectsDendro= FALSE, minClusterSize = minModuleSize)
dynamicColors= labels2colors(dynamicMods)
#Calculate eigengenes
MEList= moduleEigengenes(datExpr, colors= dynamicColors,softPower = softPower)
MEs= MEList$eigengenes
#Calculate dissimilarity of module eigengenes
MEDiss= 1-cor(MEs)
#Cluster module eigengenes
METree= flashClust(as.dist(MEDiss), method= "average")
#save(dynamicMods, MEList, MEs, MEDiss, METree, file= "Network_heatSamples_signed_RLDfiltered.RData")
#plots tree showing how the eigengenes cluster together
#INCLUE THE NEXT LINE TO SAVE TO FILE
#pdf(file="clusterwithoutmodulecolors.pdf")
sizeGrWindow(7,6)
plot(METree, main= "Clustering of module eigengenes", xlab= "", sub= "")
#set a threhold for merging modules. In this example we chose a cut height of 0.25, corresponding to crrelation of 0.75, to merge
MEDissThres = 0.4
#Plot the cut line into the dendogram
abline(h=MEDissThres, col = "red")
#Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose =3)
#Ther merged module colors
mergedColors = merge$colors
#Eigengenes of the new merged modules:
mergedMEs = merge$newMEs
#INCLUE THE NEXT LINE TO SAVE TO FILE
dev.off()
#plot dendrogram with module colors below it
#INCLUE THE NEXT LINE TO SAVE TO FILE
pdf(file="cluster_controlssamples_vatlow.pdf")
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors), c("Dynamic Tree Cut", "Merged dynamic"), dendroLabels= FALSE, hang=0.03, addGuide= TRUE, guideHang=0.05)
moduleColors = mergedColors
colorOrder = c("grey", standardColors(50))
moduleLabels = match(moduleColors, colorOrder)-1
MEs = mergedMEs
#INCLUE THE NEXT LINE TO SAVE TO FILE
dev.off()
#Define number of genes and samples
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
#Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use= "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
#sizeGrWindow(15, 15)
#This will display correlations and their p-values
textMatrix= paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 2),
")", sep= "");
#textMatrix = formatC(moduleTraitCor, digits = 2, format = "f")
dim(textMatrix)= dim(moduleTraitCor)
par(mar= c(6, 8.5, 3, 3));
#display the correlation values with a heatmap plot
#sizeGrWindow(11,8)
#INCLUE THE NEXT LINE TO SAVE TO FILE
pdf(file="heatmap.pdf", height=11, width=8)
labeledHeatmap(Matrix= moduleTraitCor,
xLabels= names(datTraits),
yLabels= names(MEs),
ySymbols= names(MEs),
colorLabels= FALSE,
colors= blueWhiteRed(50),
textMatrix= textMatrix,
setStdMargins= TRUE,
cex.text= 0.75,
zlim= c(-1,1),
main= paste("Module-trait relationships"))
#INCLUE THE NEXT LINE TO SAVE TO FILE
dev.off()
# module-trait correlations
quartz()
library(RColorBrewer)
modLabels=sub("ME","",names(MEs))
ps=signif(moduleTraitPvalue,1)
cors=signif(moduleTraitCor,2)
textMatrix = cors;
#paste(cors, "\n(",ps, ")", sep = "");
textMatrix[ps>0.05]="-"
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
pdf(file="Trait_heatmap_controlss_phenotype_06302021_vatialow.pdf", height=9, width=8)
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
ySymbols = modLabels,
yLabels = modLabels,
colorLabels = FALSE,
colors = colorRampPalette(c("blue","lightblue","white","coral","red"))(50),
textMatrix = textMatrix,
setStdMargins = TRUE,
cex.text = 0.8,
cex.lab.x = 0.8,
zlim = c(-.8,.8),
main = paste("Module-Trait Correlations of Control Treatments"))
dev.off()
# module size barplot
labelShift=300 # increase to move module size labels to the right
quartz()
par(mar = c(6, 8.5, 3, 3));
mct=table(moduleColors)
mct[modLabels]
x=barplot(mct[rev(modLabels)],horiz=T,las=1,xlim=c(0,8000),col=rev(modLabels))
text(mct[rev(modLabels)]+labelShift,y=x,mct[rev(modLabels)],cex=0.8)
x=barplot(mct[rev(modLabels)],horiz=T,las=1,xlim=c(0,8000),col=rev(modLabels))
text(mct[rev(modLabels)]+labelShift,y=x,mct[rev(modLabels)],cex=0.8)
#Only run the following to install BiocManager if not already installed
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install()
# Only run the following commands once to install WGCNA and flashClust on your computer
#BiocManager::install("WGCNA")
#BiocManager::install("edgeR")
#install.packages("flashClust")
# Load WGCNA and flashClust libraries every time you open R
library(WGCNA)
library(flashClust)
library(tidyverse)
library("edgeR")
library("statmod")
library("data.table")
#Set your current working directory (where all your files are)
setwd("/Users/Melissa/Desktop/GitHub/RNAseq_allsites_Barshisreference/WGCNA/")
# This creates an object called "datExpr" that contains the normalized counts file output from EdgeR
datExpr = read.csv("../GLM_edgeR_outputs/controls/glmQLF_normalizedCounts_controls.csv")
# "head" the file to preview it
head(datExpr) # You see that genes are listed in a column named "X" and samples are in columns
#row.names(datExpr) = datExpr$X
#datExpr$X = NULL
datExpr = as.data.frame(t(datExpr)) # now samples are rows and genes are columns
dim(datExpr) # 38 samples (or 19 for just heat/control) and 15109 genes (or fewer for heat/control)
head(datExpr)
row.names(datExpr)
gsg = goodSamplesGenes(datExpr, verbose = 3)
gsg$allOK
datTraits = read.csv("Controls_tommodelv3_07_02_2021_posterICRS/phenotypedata_controls_tommodels_07_02_21_ICRS.csv")
head(datTraits)
nrow(datTraits)
#Then form a data frame analogous to expression data that will hold the clinical traits.
rownames(datTraits) = datTraits[,1]
datTraits$Sample = NULL
table(rownames(datTraits)==rownames(datExpr)) #should return TRUE if datasets align correctly, otherwise your names are out of order
head(datTraits)
# Choose a soft threshold power ------------------------------------
powers = c(c(1:10), seq(from =10, to=30, by=1)) #choosing a set of soft-thresholding powers
sft = pickSoftThreshold(datExpr, powerVector=powers, verbose =5, networkType="signed") #call network topology analysis function
sizeGrWindow(9,5)
par(mfrow= c(1,2))
cex1=0.9
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], xlab= "Soft Threshold (power)", ylab="Scale Free Topology Model Fit, signed R^2", type= "n", main= paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], labels=powers, cex=cex1, col="red")
abline(h=0.9, col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5], xlab= "Soft Threshold (power)", ylab="Mean Connectivity", type="n", main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1, col="red")
#build a adjacency "correlation" matrix
enableWGCNAThreads()
softPower = 14
adjacency = adjacency(datExpr, power = softPower, type = "signed") #specify network type
head(adjacency)
#translate the adjacency into topological overlap matrix and calculate the corresponding dissimilarity:
TOM = TOMsimilarity(adjacency, TOMType="signed") # specify network type
dissTOM = 1-TOM
# Generate a clustered gene tree
geneTree = flashClust(as.dist(dissTOM), method="average")
plot(geneTree, xlab="", sub="", main= "Gene Clustering on TOM-based dissimilarity", labels= FALSE, hang=0.04)
#This sets the minimum number of genes to cluster into a module
minModuleSize = 30
dynamicMods = cutreeDynamic(dendro= geneTree, distM= dissTOM, deepSplit=2, pamRespectsDendro= FALSE, minClusterSize = minModuleSize)
dynamicColors= labels2colors(dynamicMods)
#Calculate eigengenes
MEList= moduleEigengenes(datExpr, colors= dynamicColors,softPower = softPower)
MEs= MEList$eigengenes
#Calculate dissimilarity of module eigengenes
MEDiss= 1-cor(MEs)
#Cluster module eigengenes
METree= flashClust(as.dist(MEDiss), method= "average")
#save(dynamicMods, MEList, MEs, MEDiss, METree, file= "Network_heatSamples_signed_RLDfiltered.RData")
#plots tree showing how the eigengenes cluster together
#INCLUE THE NEXT LINE TO SAVE TO FILE
#pdf(file="clusterwithoutmodulecolors.pdf")
sizeGrWindow(7,6)
plot(METree, main= "Clustering of module eigengenes", xlab= "", sub= "")
#set a threhold for merging modules. In this example we chose a cut height of 0.25, corresponding to crrelation of 0.75, to merge
MEDissThres = 0.4
#Plot the cut line into the dendogram
abline(h=MEDissThres, col = "red")
#Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose =3)
#Ther merged module colors
mergedColors = merge$colors
#Eigengenes of the new merged modules:
mergedMEs = merge$newMEs
#INCLUE THE NEXT LINE TO SAVE TO FILE
dev.off()
#plot dendrogram with module colors below it
#INCLUE THE NEXT LINE TO SAVE TO FILE
pdf(file="cluster_controlssamples_icrs.pdf")
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors), c("Dynamic Tree Cut", "Merged dynamic"), dendroLabels= FALSE, hang=0.03, addGuide= TRUE, guideHang=0.05)
moduleColors = mergedColors
colorOrder = c("grey", standardColors(50))
moduleLabels = match(moduleColors, colorOrder)-1
MEs = mergedMEs
#INCLUE THE NEXT LINE TO SAVE TO FILE
dev.off()
#Define number of genes and samples
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
#Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use= "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
#Define number of genes and samples
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
#Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use= "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
#sizeGrWindow(15, 15)
#This will display correlations and their p-values
textMatrix= paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 2),
")", sep= "");
#textMatrix = formatC(moduleTraitCor, digits = 2, format = "f")
dim(textMatrix)= dim(moduleTraitCor)
par(mar= c(6, 8.5, 3, 3));
#display the correlation values with a heatmap plot
#sizeGrWindow(11,8)
#INCLUE THE NEXT LINE TO SAVE TO FILE
pdf(file="heatmap.pdf", height=11, width=8)
labeledHeatmap(Matrix= moduleTraitCor,
xLabels= names(datTraits),
yLabels= names(MEs),
ySymbols= names(MEs),
colorLabels= FALSE,
colors= blueWhiteRed(50),
textMatrix= textMatrix,
setStdMargins= TRUE,
cex.text= 0.75,
zlim= c(-1,1),
main= paste("Module-trait relationships"))
#INCLUE THE NEXT LINE TO SAVE TO FILE
dev.off()
# module-trait correlations
quartz()
library(RColorBrewer)
modLabels=sub("ME","",names(MEs))
ps=signif(moduleTraitPvalue,1)
cors=signif(moduleTraitCor,2)
textMatrix = cors;
#paste(cors, "\n(",ps, ")", sep = "");
textMatrix[ps>0.05]="-"
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# module-trait correlations
quartz()
library(RColorBrewer)
modLabels=sub("ME","",names(MEs))
ps=signif(moduleTraitPvalue,1)
cors=signif(moduleTraitCor,2)
textMatrix = cors;
#paste(cors, "\n(",ps, ")", sep = "");
textMatrix[ps>0.05]="-"
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
pdf(file="Trait_heatmap_controls_phenotype_07022021_icrs.pdf", height=9, width=8)
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
ySymbols = modLabels,
yLabels = modLabels,
colorLabels = FALSE,
colors = colorRampPalette(c("blue","lightblue","white","coral","red"))(50),
textMatrix = textMatrix,
setStdMargins = TRUE,
cex.text = 0.8,
cex.lab.x = 0.8,
zlim = c(-.8,.8),
main = paste("Module-Trait Correlations of Control Treatments"))
dev.off()
# module size barplot
labelShift=300 # increase to move module size labels to the right
quartz()
par(mar = c(6, 8.5, 3, 3));
mct=table(moduleColors)
mct[modLabels]
x=barplot(mct[rev(modLabels)],horiz=T,las=1,xlim=c(0,8000),col=rev(modLabels))
text(mct[rev(modLabels)]+labelShift,y=x,mct[rev(modLabels)],cex=0.8)
x=barplot(mct[rev(modLabels)],horiz=T,las=1,xlim=c(0,8000),col=rev(modLabels))
text(mct[rev(modLabels)]+labelShift,y=x,mct[rev(modLabels)],cex=0.8)
setwd(dir = "~/Desktop/GitHub/Symbiont_qPCR/")
rm( list = ls())
graphics.off()
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(tidyr)
library(reshape2)
library(mosaic)
library(RColorBrewer)
library(DescTools)
library(epitools)
dat1 <- read.csv("cleandata/08_05_20_fields1-4.csv")
dat2 <- read.csv("cleandata/10_14_20_fields5-8.csv")
dat3 <- read.csv("cleandata/12_14_20_redos.csv")
dat <- rbind(dat1,dat2)
nrow(dat)
#remove and replace with redos
dat<-dat[!(dat$Sample=="Alu_F2" | dat$Sample=="TeleF5" | dat$Sample=="VatiaF6"),]
dat3 <- dat3[!(dat3$Sample=="AluF4"),]
dat3$Starting.Quantity..SQ. <- NULL
dat <- rbind(dat,dat3)
head(dat)
dat$FAM <- as.numeric(dat$FAM)
dat$VIC <- as.numeric(dat$VIC)
dat <- dat[!(dat$Sample=="NC"),]
dat$Site = "n"
dat <- mutate(dat, Site = derivedFactor(
"Faga'tele" = (grepl("Tele", dat$Sample)),
"Faga'alu" = (grepl("Alu", dat$Sample)),
"Vatia" = (grepl("Vat", dat$Sample)),
"Cannery" = (grepl("Can", dat$Sample)),
"Coconut Point" = (grepl("Coco", dat$Sample)),
.default = NA
))
dat <- dat[!is.na(dat$Site),]
dat_log <- dat
dat_log$FAM_log <- log10(dat_log$FAM)
dat_log$VIC_log <- log10(dat_log$VIC)
dat_ratio_log <- dat_log %>%
group_by(Sample, Site) %>%
summarize(FAM_log_mean = mean(FAM_log, na.rm = TRUE), VIC_log_mean = mean(VIC_log, na.rm = TRUE))
dat_ratio_log
dat_ratio_log$cellnum_C <- (2^(40 - dat_ratio_log$VIC_log_mean)) / 9
dat_ratio_log$cellnum_C[is.na(dat_ratio_log$VIC_log_mean)] <- (2^(40-10000000000000))
dat_ratio_log$cellnum_D <- (2^(40 - dat_ratio_log$FAM_log_mean)) / 1
dat_ratio_log$D_prop <- dat_ratio_log$cellnum_D / (dat_ratio_log$cellnum_C + dat_ratio_log$cellnum_D)
dat_ratio_log$C_prop <- dat_ratio_log$cellnum_C / (dat_ratio_log$cellnum_C + dat_ratio_log$cellnum_D)
dat_ratio_gather <- gather(dat_ratio_log, "Species", "Ratio", 7:8)
dat_log
dat_ratio_log <- dat_log %>%
group_by(Sample, Site) %>%
summarize(FAM_log_mean = mean(FAM_log, na.rm = TRUE), VIC_log_mean = mean(VIC_log, na.rm = TRUE))
dat_ratio_log
setwd(dir = "~/Desktop/GitHub/Symbiont_qPCR/")
rm( list = ls())
graphics.off()
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(tidyr)
library(reshape2)
library(mosaic)
library(RColorBrewer)
library(DescTools)
library(epitools)
setwd(dir = "~/Desktop/GitHub/Symbiont_qPCR/")
rm( list = ls())
graphics.off()
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(tidyr)
library(reshape2)
library(mosaic)
library(RColorBrewer)
library(DescTools)
library(epitools)
setwd(dir = "~/Desktop/GitHub/Symbiont_qPCR/")
rm( list = ls())
graphics.off()
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(tidyr)
library(reshape2)
library(mosaic)
library(RColorBrewer)
library(DescTools)
library(epitools)
dat1 <- read.csv("cleandata/08_05_20_fields1-4.csv")
dat2 <- read.csv("cleandata/10_14_20_fields5-8.csv")
dat3 <- read.csv("cleandata/12_14_20_redos.csv")
dat <- rbind(dat1,dat2)
nrow(dat)
#remove and replace with redos
dat<-dat[!(dat$Sample=="Alu_F2" | dat$Sample=="TeleF5" | dat$Sample=="VatiaF6"),]
dat3 <- dat3[!(dat3$Sample=="AluF4"),]
dat3$Starting.Quantity..SQ. <- NULL
dat <- rbind(dat,dat3)
head(dat)
dat$FAM <- as.numeric(dat$FAM)
dat$VIC <- as.numeric(dat$VIC)
dat <- dat[!(dat$Sample=="NC"),]
dat$Site = "n"
dat <- mutate(dat, Site = derivedFactor(
"Faga'tele" = (grepl("Tele", dat$Sample)),
"Faga'alu" = (grepl("Alu", dat$Sample)),
"Vatia" = (grepl("Vat", dat$Sample)),
"Cannery" = (grepl("Can", dat$Sample)),
"Coconut Point" = (grepl("Coco", dat$Sample)),
.default = NA
))
dat <- dat[!is.na(dat$Site),]
dat_log <- dat
dat_log$FAM_log <- log10(dat_log$FAM)
dat_log$VIC_log <- log10(dat_log$VIC)
dat_ratio_log <- dat_log %>%
group_by(Sample, Site) %>%
summarize(FAM_log_mean = mean(FAM_log, na.rm = TRUE), VIC_log_mean = mean(VIC_log, na.rm = TRUE))
dat_ratio_log
dat_ratio_log$cellnum_C <- (2^(40 - dat_ratio_log$VIC_log_mean)) / 9
dat_ratio_log$cellnum_C[is.na(dat_ratio_log$VIC_log_mean)] <- (2^(40-10000000000000))
dat_ratio_log$cellnum_D <- (2^(40 - dat_ratio_log$FAM_log_mean)) / 1
dat_ratio_log$D_prop <- dat_ratio_log$cellnum_D / (dat_ratio_log$cellnum_C + dat_ratio_log$cellnum_D)
dat_ratio_log$C_prop <- dat_ratio_log$cellnum_C / (dat_ratio_log$cellnum_C + dat_ratio_log$cellnum_D)
dat_ratio_gather <- gather(dat_ratio_log, "Species", "Ratio", 7:8)
dat_ratio_gather$Ratio <- round(dat_ratio_gather$Ratio, digits = 4)
colors = c("royalblue2", "palegreen2", "lightblue", "tomato3", "firebrick4")
ggplot(dat_ratio_log, aes(x = Site, y = C_prop, fill = Site)) + geom_violin() + theme_bw() + ylab("Log Proportion of \n Cladocopium") + xlab("") + geom_point(shape = 21, position = position_jitter(width = 0.02), size = 3.5, aes(fill = Site))  + scale_x_discrete(limits = c("Faga'tele","Vatia" ,"Faga'alu","Cannery","Coconut Point" )) + scale_color_manual(values = colors) + scale_fill_manual(values = colors) +theme(text=element_text(size=19), axis.text.x = element_text(angle = 45, hjust = 1), axis.title.x = element_text(size = 17))
ggplot(dat_ratio_log, aes(x = Site, y = C_prop, fill = Site)) + geom_violin() + theme_bw() + ylab("Log Proportion of \n Cladocopium") + xlab("") + geom_point(shape = 21, position = position_jitter(width = 0.02), size = 3.5, aes(fill = Site))  + scale_x_discrete(limits = c("Faga'tele","Vatia" ,"Faga'alu","Cannery","Coconut Point" )) + scale_color_manual(values = colors) + scale_fill_manual(values = colors) +theme(text=element_text(size=14), axis.text.x = element_text(angle = 45, hjust = 1), axis.title.x = element_text(size = 14))
ggplot(dat_ratio_log, aes(x = Site, y = C_prop, fill = Site)) + geom_violin() + theme_bw() + ylab("Log Proportion of Cladocopium") + xlab("") + geom_point(shape = 21, position = position_jitter(width = 0.02), size = 3.5, aes(fill = Site))  + scale_x_discrete(limits = c("Faga'tele","Vatia" ,"Faga'alu","Cannery","Coconut Point" )) + scale_color_manual(values = colors) + scale_fill_manual(values = colors) +theme(text=element_text(size=14), axis.text.x = element_text(angle = 45, hjust = 1), axis.title.x = element_text(size = 14))
ggplot(dat_ratio_log, aes(x = Site, y = C_prop, fill = Site)) + geom_violin() + theme_bw() + ylab("Log Proportion of Cladocopium") + xlab("") + geom_point(shape = 21, position = position_jitter(width = 0.02), size = 3.5, aes(fill = Site))  + scale_x_discrete(limits = c("Faga'tele","Vatia" ,"Faga'alu","Cannery","Coconut Point" )) + scale_color_manual(values = colors) + scale_fill_manual(values = colors) +theme(text=element_text(size=14), axis.text.x = element_text(angle = 45, hjust = 1), axis.title.x = element_text(size = 16))
ggplot(dat_ratio_log, aes(x = Site, y = C_prop, fill = Site)) + geom_violin() + theme_bw() + ylab("Log Proportion of Cladocopium") + xlab("") + geom_point(shape = 21, position = position_jitter(width = 0.02), size = 3.5, aes(fill = Site))  + scale_x_discrete(limits = c("Faga'tele","Vatia" ,"Faga'alu","Cannery","Coconut Point" )) + scale_color_manual(values = colors) + scale_fill_manual(values = colors) +theme(text=element_text(size=14), axis.text.x = element_text(angle = 45, hjust = 1), axis.title.x = element_text(size = 19))
ggplot(dat_ratio_log, aes(x = Site, y = C_prop, fill = Site)) + geom_violin() + theme_bw() + ylab("Log Proportion of Cladocopium") + xlab("") + geom_point(shape = 21, position = position_jitter(width = 0.02), size = 3.5, aes(fill = Site))  + scale_x_discrete(limits = c("Faga'tele","Vatia" ,"Faga'alu","Cannery","Coconut Point" )) + scale_color_manual(values = colors) + scale_fill_manual(values = colors) +theme(text=element_text(size=16), axis.text.x = element_text(angle = 45, hjust = 1), axis.title.x = element_text(size = 19))
ggsave("figures/thesis_newsymbiontfig.png", width = 6, height = 4)
library(ggbernie)
ggplot(mtcars, aes(x = mtcars$mpg)) + geom_bernie()
ggplot(mtcars, aes(x = mtcars$mpg, y = mtcars$disp)) + geom_bernie()
ggplot(mtcars, aes(x = mtcars$mpg, y = mtcars$disp)) + geom_bernie(position = "young")
ggplot(mtcars, aes(x = mtcars$mpg, y = mtcars$disp)) + geom_bernie(data  = "young")
ggplot(mtcars, aes(x = mtcars$mpg, y = mtcars$disp)) + geom_bernie(stat  = "young")
